#!/usr/bin/env python3

from core import common
from core import model
from core.facebook_fetcher import create_production_fetcher

from collections import OrderedDict
import argparse
import logging
import requests_cache
import sys


def fetch_timeline_likes(fb_fetcher, user_id):
    """ Return an OrderedDict mapping user ids to a list of dates.

    The dates are added when users liked the article and
    correspond to when the articles were posted.

    e.g. OrderedDict([('username1', [epoch1, epoch2, ...]), ])
    """

    articles_found = fb_fetcher.fetch_articles_from_timeline(user_id)

    articles_liked_per_user = \
        fb_fetcher.fetch_articles_liked_per_user(articles_found.keys())

    timeline_likes = OrderedDict()

    for user_id in articles_liked_per_user:

        articles_times = []
        articles_id_set = articles_liked_per_user[user_id]
        for articles_id in articles_id_set:

            article_date_str = articles_found[articles_id]
            article_date = model.parse_date(article_date_str)
            article_date_epoch = model.date_to_epoch(article_date)

            articles_times.append(article_date_epoch)

        timeline_likes[user_id] = articles_times

    return timeline_likes


if __name__ == "__main__":

    common.configure_logging(logging.INFO)

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-u', dest='username', action='store',
        help="Facebook username, e.g. zuck for Mark Zuckerberg")
    args = parser.parse_args()

    if not args.username:
        parser.print_help()
        sys.exit(1)

    # Enable caching (2 hrs) to avoid hitting Facebook too much
    requests_cache.install_cache(expire_after=7200)

    fb_fetcher = create_production_fetcher()

    timeline_likes = fetch_timeline_likes(fb_fetcher, args.username)

    print(common.prettify(timeline_likes))
