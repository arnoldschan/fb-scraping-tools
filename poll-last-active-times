#!/usr/bin/env python3

from core import common
from core import model
from core.facebook_fetcher import create_production_fetcher

from contextlib import contextmanager
from datetime import datetime
import argparse
import json
import logging
import time
import signal
import sys


def print_and_exit(times):
    print(common.prettify(times))
    sys.exit(0)


@contextmanager
def interrupt_handler(times):
    for sig in [signal.SIGINT, signal.SIGTERM]:
        signal.signal(
            sig,
            lambda signal, frame: print_and_exit(times))
    yield
    print_and_exit(times)


if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-t', dest='poll_secs', type=int, action='store',
        help="Time to poll in seconds", default=0)
    parser.add_argument(
        '-d', dest='delay_secs', type=int, action='store',
        help="Delay between polls", default=60*5)
    args = parser.parse_args()

    delay_secs = args.delay_secs
    if args.poll_secs == 0:
        logging.info("Polling forever")
    else:
        delay_secs = min(args.poll_secs, args.delay_secs)
        logging.info(
            "Polling for {0} second(s)".format(args.poll_secs))
    logging.info(
        "Delay between each poll: {0} second(s)".format(delay_secs))

    config = common.configure(caching_secs_override=-1)
    if not config:
        sys.exit(1)

    fb_fetcher = create_production_fetcher(config)

    last_active_times = {}

    with interrupt_handler(last_active_times):

        start_time = datetime.now()
        current_time = datetime.now()
        while args.poll_secs == 0 or \
                (current_time - start_time).total_seconds() < args.poll_secs:

            model.append_times(
                fb_fetcher.fetch_last_active_times(), last_active_times)

            time.sleep(delay_secs)
            current_time = datetime.now()
